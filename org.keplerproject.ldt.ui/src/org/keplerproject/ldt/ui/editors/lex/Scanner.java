package org.keplerproject.ldt.ui.editors.lex;

/* The following code was generated by JFlex 1.4_pre3 on 18/10/06 18:38 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 18/10/06 18:38 from the specification file
 * <tt>file:/C:/prj/kepler/luaeclipse/flex/lua.flex</tt>
 */
public class Scanner implements sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\13"+
    "\2\0\1\57\1\0\1\14\1\40\1\41\1\55\1\12\1\50\1\4"+
    "\1\10\1\56\1\7\11\6\1\47\1\46\1\53\1\51\1\52\2\0"+
    "\4\5\1\11\25\5\1\44\1\15\1\45\1\0\1\5\1\0\1\16"+
    "\1\21\1\33\1\20\1\23\1\31\1\5\1\36\1\30\1\5\1\24"+
    "\1\26\1\5\1\17\1\25\1\35\1\5\1\22\1\27\1\34\1\32"+
    "\1\5\1\37\3\5\1\42\1\0\1\43\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = yy_unpack_cmap(yycmap_packed);


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\60\0\140\0\220\0\300\0\220\0\360\0\u0120\0\u0150\0\u0180"+
    "\0\u01b0\0\220\0\220\0\220\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\220\0\220\0\220"+
    "\0\220\0\u0450\0\u0480\0\220\0\220\0\220\0\u04b0\0\u04e0\0\u0510\0\u0540"+
    "\0\220\0\220\0\220\0\u0570\0\u05a0\0\220\0\220\0\u05d0\0\u0600\0\u0630"+
    "\0\220\0\220\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0180\0\u0720\0\u0750\0\u0780"+
    "\0\u0120\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0120\0\u0870\0\u0120\0\u0120\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\u09f0\0\u0a20"+
    "\0\u0a50\0\u0a50\0\u0120\0\u0120\0\u0120\0\u0a80\0\u0ab0\0\u0ae0\0\u0120\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0120\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u09f0\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0120\0\u0120\0\u0e10"+
    "\0\u0120\0\u0e40\0\u0e70\0\u0ea0\0\u0120\0\u0120\0\u0ed0\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0f00\0\u0f30\0\u0120";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[290];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 290) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\10\1\14\1\15\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\10\1\25\1\26\1\10\1\27"+
    "\1\30\1\31\1\10\1\32\2\10\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\10\54\1\57\1\54\1\60\42\54\1\61\1\62"+
    "\1\63\11\61\1\64\1\65\42\61\62\0\1\6\61\0"+
    "\1\66\60\0\3\10\1\0\1\10\4\0\22\10\26\0"+
    "\2\11\1\67\1\70\11\0\1\70\42\0\2\71\1\67"+
    "\1\70\11\0\1\70\42\0\2\67\55\0\3\10\1\0"+
    "\1\10\4\0\1\10\1\72\20\10\25\0\3\10\1\0"+
    "\1\10\4\0\7\10\1\73\2\10\1\74\7\10\25\0"+
    "\3\10\1\0\1\10\4\0\7\10\1\75\12\10\25\0"+
    "\3\10\1\0\1\10\4\0\4\10\1\76\15\10\25\0"+
    "\3\10\1\0\1\10\4\0\5\10\1\77\14\10\25\0"+
    "\3\10\1\0\1\10\4\0\1\10\1\100\6\10\1\101"+
    "\11\10\25\0\3\10\1\0\1\10\4\0\4\10\1\102"+
    "\15\10\25\0\3\10\1\0\1\10\4\0\7\10\1\103"+
    "\12\10\25\0\3\10\1\0\1\10\4\0\1\10\1\104"+
    "\11\10\1\105\6\10\25\0\3\10\1\0\1\10\4\0"+
    "\1\106\6\10\1\107\4\10\1\110\5\10\25\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\111\20\10\25\0\3\10"+
    "\1\0\1\10\4\0\4\10\1\112\13\10\1\113\1\10"+
    "\25\0\3\10\1\0\1\10\4\0\20\10\1\114\1\10"+
    "\64\0\1\115\60\0\1\116\63\0\1\117\57\0\1\120"+
    "\57\0\1\121\57\0\1\122\6\0\1\54\2\0\10\54"+
    "\1\0\1\54\1\0\42\54\2\0\1\56\55\0\2\123"+
    "\1\0\10\123\1\124\1\125\1\126\1\123\1\127\1\123"+
    "\1\130\1\131\6\123\1\132\2\123\1\133\23\123\1\61"+
    "\2\0\11\61\2\0\42\61\2\0\1\63\55\0\2\123"+
    "\1\0\11\123\1\134\1\135\1\123\1\136\1\123\1\137"+
    "\1\140\6\123\1\141\2\123\1\142\23\123\1\143\1\5"+
    "\1\6\41\143\1\144\13\143\6\0\2\67\1\0\1\70"+
    "\11\0\1\70\40\0\1\145\1\0\2\146\2\0\1\145"+
    "\52\0\3\10\1\0\1\10\4\0\2\10\1\147\17\10"+
    "\25\0\3\10\1\0\1\10\4\0\16\10\1\150\3\10"+
    "\25\0\3\10\1\0\1\10\4\0\10\10\1\151\11\10"+
    "\25\0\3\10\1\0\1\10\4\0\5\10\1\152\14\10"+
    "\25\0\3\10\1\0\1\10\4\0\16\10\1\153\1\154"+
    "\2\10\25\0\3\10\1\0\1\10\4\0\2\10\1\155"+
    "\17\10\25\0\3\10\1\0\1\10\4\0\11\10\1\156"+
    "\10\10\25\0\3\10\1\0\1\10\4\0\15\10\1\157"+
    "\4\10\25\0\3\10\1\0\1\10\4\0\10\10\1\160"+
    "\11\10\25\0\3\10\1\0\1\10\4\0\4\10\1\161"+
    "\15\10\25\0\3\10\1\0\1\10\4\0\1\10\1\162"+
    "\20\10\25\0\3\10\1\0\1\10\4\0\16\10\1\163"+
    "\3\10\25\0\3\10\1\0\1\10\4\0\14\10\1\164"+
    "\5\10\25\0\3\10\1\0\1\10\4\0\5\10\1\165"+
    "\14\10\25\0\3\10\1\0\1\10\4\0\12\10\1\166"+
    "\7\10\20\0\1\143\1\5\1\6\56\143\1\5\1\6"+
    "\41\143\1\167\13\143\6\0\2\146\55\0\3\10\1\0"+
    "\1\10\4\0\1\170\21\10\25\0\3\10\1\0\1\10"+
    "\4\0\14\10\1\171\5\10\25\0\3\10\1\0\1\10"+
    "\4\0\5\10\1\172\14\10\25\0\3\10\1\0\1\10"+
    "\4\0\5\10\1\173\14\10\25\0\3\10\1\0\1\10"+
    "\4\0\1\174\21\10\25\0\3\10\1\0\1\10\4\0"+
    "\11\10\1\175\10\10\25\0\3\10\1\0\1\10\4\0"+
    "\15\10\1\176\4\10\25\0\3\10\1\0\1\10\4\0"+
    "\12\10\1\177\7\10\25\0\3\10\1\0\1\10\4\0"+
    "\5\10\1\200\14\10\25\0\3\10\1\0\1\10\4\0"+
    "\1\10\1\201\20\10\25\0\3\10\1\0\1\10\4\0"+
    "\10\10\1\202\11\10\25\0\3\10\1\0\1\10\4\0"+
    "\6\10\1\203\13\10\25\0\3\10\1\0\1\10\4\0"+
    "\4\10\1\204\15\10\25\0\3\10\1\0\1\10\4\0"+
    "\1\205\21\10\25\0\3\10\1\0\1\10\4\0\12\10"+
    "\1\206\7\10\25\0\3\10\1\0\1\10\4\0\10\10"+
    "\1\207\11\10\25\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\210\14\10\25\0\3\10\1\0\1\10\4\0\16\10"+
    "\1\211\3\10\25\0\3\10\1\0\1\10\4\0\10\10"+
    "\1\212\11\10\25\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\213\14\10\25\0\3\10\1\0\1\10\4\0\1\10"+
    "\1\214\20\10\25\0\3\10\1\0\1\10\4\0\16\10"+
    "\1\215\3\10\25\0\3\10\1\0\1\10\4\0\13\10"+
    "\1\216\6\10\25\0\3\10\1\0\1\10\4\0\12\10"+
    "\1\217\7\10\25\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\220\12\10\25\0\3\10\1\0\1\10\4\0\1\10"+
    "\1\221\20\10\20\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1, 
     1,  9,  9,  9,  1,  1,  1,  1,  9,  9,  9,  1,  1,  9,  9,  1, 
     1,  1,  9,  9,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
     9,  9,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3936];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 12: 
          {  yybegin(STRING); string.setLength(0);  }
        case 146: break;
        case 44: 
        case 45: 
          {  throw new RuntimeException("Unterminated string at end of line");  }
        case 147: break;
        case 141: 
          {  return symbol(ELSEIF);  }
        case 148: break;
        case 140: 
          {  return symbol(REPEAT);  }
        case 149: break;
        case 139: 
          {  return symbol(RETURN);  }
        case 150: break;
        case 53: 
        case 98: 
        case 99: 
          {  /* ignore */  }
        case 151: break;
        case 4: 
        case 5: 
          {  /* ignore */  }
        case 152: break;
        case 27: 
          {  return symbol(LPAREN);  }
        case 153: break;
        case 28: 
          {  return symbol(RPAREN);  }
        case 154: break;
        case 29: 
          {  return symbol(LBRACE);  }
        case 155: break;
        case 30: 
          {  return symbol(RBRACE);  }
        case 156: break;
        case 31: 
          {  return symbol(LBRACK);  }
        case 157: break;
        case 32: 
          {  return symbol(RBRACK);  }
        case 158: break;
        case 83: 
          {  string.append( '\"' );  }
        case 159: break;
        case 84: 
          {  string.append( '\'' );  }
        case 160: break;
        case 85: 
          {  string.append( '\\' );  }
        case 161: break;
        case 86: 
          {  string.append( '\n' );  }
        case 162: break;
        case 87: 
          {  string.append( '\b' );  }
        case 163: break;
        case 88: 
          {  string.append( '\r' );  }
        case 164: break;
        case 89: 
          {  string.append( '\f' );  }
        case 165: break;
        case 90: 
          {  string.append( '\t' );  }
        case 166: break;
        case 65: 
          {  return symbol(OR);  }
        case 167: break;
        case 60: 
          {  return symbol(DO);  }
        case 168: break;
        case 42: 
          {  return symbol(MOD);  }
        case 169: break;
        case 41: 
          {  return symbol(DIV);  }
        case 170: break;
        case 39: 
          {  return symbol(NOT);  }
        case 171: break;
        case 38: 
          {  return symbol(LT);  }
        case 172: break;
        case 37: 
          {  return symbol(GT);  }
        case 173: break;
        case 36: 
          {  return symbol(EQ);  }
        case 174: break;
        case 10: 
          {  return symbol(DOT);  }
        case 175: break;
        case 67: 
          {  return symbol(IN);  }
        case 176: break;
        case 68: 
          {  return symbol(IF);  }
        case 177: break;
        case 102: 
          {  return symbol(AND);  }
        case 178: break;
        case 103: 
          {  return symbol(NOT);  }
        case 179: break;
        case 104: 
          {  return symbol(NIL);  }
        case 180: break;
        case 108: 
          {  return symbol(END);  }
        case 181: break;
        case 112: 
          {  return symbol(FOR);  }
        case 182: break;
        case 144: 
          {  return symbol(FUNCTION);  }
        case 183: break;
        case 33: 
          {  return symbol(SEMICOLON);  }
        case 184: break;
        case 76: 
          {  return symbol(DBLBRACK);  }
        case 185: break;
        case 77: 
          {  return symbol(DBRBRACK);  }
        case 186: break;
        case 118: 
          {  return symbol(MLCOMMENT);  }
        case 187: break;
        case 49: 
        case 50: 
          {  throw new RuntimeException("Unterminated character literal at end of line");  }
        case 188: break;
        case 138: 
          {  return symbol(WHILE);  }
        case 189: break;
        case 137: 
          {  return symbol(UNTIL);  }
        case 190: break;
        case 40: 
          {  return symbol(MULT);  }
        case 191: break;
        case 35: 
          {  return symbol(COMMA);  }
        case 192: break;
        case 11: 
          {  return symbol(PLUS);  }
        case 193: break;
        case 6: 
          {  return symbol(MINUS);  }
        case 194: break;
        case 34: 
          {  return symbol(COLON);  }
        case 195: break;
        case 78: 
          {  return symbol(EQEQ);  }
        case 196: break;
        case 79: 
          {  return symbol(GTEQ);  }
        case 197: break;
        case 80: 
          {  return symbol(LTEQ);  }
        case 198: break;
        case 81: 
          {  return symbol(NOTEQ);  }
        case 199: break;
        case 122: 
          {  return symbol(ELSE);  }
        case 200: break;
        case 128: 
          {  return symbol(THEN);  }
        case 201: break;
        case 130: 
          {  return symbol(BREAK);  }
        case 202: break;
        case 134: 
          {  return symbol(LOCAL);  }
        case 203: break;
        case 7: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 66: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 105: 
        case 106: 
        case 107: 
        case 109: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 136: 
        case 142: 
        case 143: 
          {  return symbol(IDENTIFIER, yytext());  }
        case 204: break;
        case 46: 
          {  yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());  }
        case 205: break;
        case 92: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\\'));  }
        case 206: break;
        case 54: 
        case 56: 
        case 101: 
          {  return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));  }
        case 207: break;
        case 127: 
          {  return symbol(BOOLEAN_LITERAL, new Boolean(true));  }
        case 208: break;
        case 135: 
          {  return symbol(BOOLEAN_LITERAL, new Boolean(false));  }
        case 209: break;
        case 51: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, string.toString());  }
        case 210: break;
        case 8: 
        case 9: 
          {  return symbol(INTEGER_LITERAL, new Integer(yytext()));  }
        case 211: break;
        case 13: 
          {  yybegin(CHARLITERAL);  }
        case 212: break;
        case 91: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\"')); }
        case 213: break;
        case 93: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\n')); }
        case 214: break;
        case 94: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\b')); }
        case 215: break;
        case 95: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\r')); }
        case 216: break;
        case 96: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\f')); }
        case 217: break;
        case 97: 
          {  yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\t')); }
        case 218: break;
        case 48: 
          {  string.append( yytext() );  }
        case 219: break;
        case 43: 
          {  string.append( yytext() );  }
        case 220: break;
        case 3: 
        case 47: 
        case 52: 
          {  throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);  }
        case 221: break;
        case 82: 
          {  throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");  }
        case 222: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {  return symbol(EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
